pipeline {
    agent any
    parameters {
        string(name: 'IMAGE_VERSION', defaultValue: '1.0.0', description: 'Enter the version for the Docker image')
    }

    environment {
        DOCKER_IMAGE = '13.126.216.160:5000/weather-api/weather-api-image'
        GIT_REPO = 'https://github.com/Shadikul-Islam/DevOps-Project-Task.git'
        GIT_CREDENTIALS_ID = 'git-access'
        BRANCH = 'master'
        DOCKER_REGISTRY = '13.126.216.160:5000'
        SSH_CREDENTIALS_ID_DEPLOYMENT_SERVER = 'deployment-server'
        DEPLOY_SERVER = 'ubuntu@13.126.216.160'
    }

    stages {
        stage('Clone Code') {
            steps {
                script {
                    git branch: "${BRANCH}", credentialsId: "${GIT_CREDENTIALS_ID}", url: "${GIT_REPO}"
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    sh "cd weather-api-project && docker build -f ./docker/Dockerfile.prod -t ${DOCKER_IMAGE}:${IMAGE_VERSION} ."
                }
            }
        }

        stage('Tag & Push Docker Image to Registry') {
            steps {
                script {
                    sh "docker push ${DOCKER_IMAGE}:${IMAGE_VERSION}"
                }
            }
        }

        stage('Deploy to Server') {
            steps {
                script {
                    sshagent([SSH_CREDENTIALS_ID_DEPLOYMENT_SERVER]) {
                    sh '''
                        ssh -o StrictHostKeyChecking=no ${DEPLOY_SERVER} "docker pull ${DOCKER_IMAGE}:${IMAGE_VERSION}"
                        ssh -o StrictHostKeyChecking=no ${DEPLOY_SERVER} "docker stop weather-api-container || true"
                        ssh -o StrictHostKeyChecking=no ${DEPLOY_SERVER} "docker rm weather-api-container || true"
                        ssh -o StrictHostKeyChecking=no ${DEPLOY_SERVER} "docker run -d --name weather-api-container -p 8000:8000 ${DOCKER_IMAGE}:${IMAGE_VERSION}"
                    '''
                    }
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}
